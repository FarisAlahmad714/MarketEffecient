[1mdiff --git a/.env b/.env[m
[1mdeleted file mode 100644[m
[1mindex d733453..0000000[m
Binary files a/.env and /dev/null differ
[1mdiff --git a/Dockerfile b/Dockerfile[m
[1mdeleted file mode 100644[m
[1mindex 27d6a88..0000000[m
[1m--- a/Dockerfile[m
[1m+++ /dev/null[m
[36m@@ -1,11 +0,0 @@[m
[31m-# backend/Dockerfile[m
[31m-FROM python:3.11-slim[m
[31m-[m
[31m-WORKDIR /app[m
[31m-[m
[31m-COPY requirements.txt .[m
[31m-RUN pip install --no-cache-dir -r requirements.txt[m
[31m-[m
[31m-COPY . .[m
[31m-[m
[31m-CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"][m
\ No newline at end of file[m
[1mdiff --git a/README.md b/README.md[m
[1mindex 49cc8ef..e69de29 100644[m
Binary files a/README.md and b/README.md differ
[1mdiff --git a/alembic/env.py b/alembic/env.py[m
[1mdeleted file mode 100644[m
[1mindex e6b4537..0000000[m
[1m--- a/alembic/env.py[m
[1m+++ /dev/null[m
[36m@@ -1,64 +0,0 @@[m
[31m-# alembic/env.py[m
[31m-import os[m
[31m-import sys[m
[31m-from logging.config import fileConfig[m
[31m-[m
[31m-from sqlalchemy import engine_from_config[m
[31m-from sqlalchemy import pool[m
[31m-[m
[31m-from alembic import context[m
[31m-[m
[31m-# Add app directory to Python path[m
[31m-sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))[m
[31m-[m
[31m-# Import models and base[m
[31m-from app.models import item  # Import all models here[m
[31m-from app.core.database import Base[m
[31m-from app.core.config import settings[m
[31m-[m
[31m-# Alembic configuration[m
[31m-config = context.config[m
[31m-[m
[31m-# Set SQLAlchemy URL from settings[m
[31m-config.set_main_option("sqlalchemy.url", str(settings.DATABASE_URL))[m
[31m-[m
[31m-# Configure logging[m
[31m-fileConfig(config.config_file_name)[m
[31m-[m
[31m-# Set metadata target[m
[31m-target_metadata = Base.metadata[m
[31m-[m
[31m-def run_migrations_offline():[m
[31m-    """Run migrations in 'offline' mode."""[m
[31m-    url = config.get_main_option("sqlalchemy.url")[m
[31m-    context.configure([m
[31m-        url=url,[m
[31m-        target_metadata=target_metadata,[m
[31m-        literal_binds=True,[m
[31m-        dialect_opts={"paramstyle": "named"},[m
[31m-    )[m
[31m-[m
[31m-    with context.begin_transaction():[m
[31m-        context.run_migrations()[m
[31m-[m
[31m-def run_migrations_online():[m
[31m-    """Run migrations in 'online' mode."""[m
[31m-    connectable = engine_from_config([m
[31m-        config.get_section(config.config_ini_section),[m
[31m-        prefix="sqlalchemy.",[m
[31m-        poolclass=pool.NullPool,[m
[31m-    )[m
[31m-[m
[31m-    with connectable.connect() as connection:[m
[31m-        context.configure([m
[31m-            connection=connection, [m
[31m-            target_metadata=target_metadata[m
[31m-        )[m
[31m-[m
[31m-        with context.begin_transaction():[m
[31m-            context.run_migrations()[m
[31m-[m
[31m-if context.is_offline_mode():[m
[31m-    run_migrations_offline()[m
[31m-else:[m
[31m-    run_migrations_online()[m
\ No newline at end of file[m
[1mdiff --git a/app/__init__.py b/app/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/__init__.py and /dev/null differ
[1mdiff --git a/app/api/__init__.py b/app/api/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/api/__init__.py and /dev/null differ
[1mdiff --git a/app/api/dependencies.py b/app/api/dependencies.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/api/dependencies.py and /dev/null differ
[1mdiff --git a/app/api/routes/__init__.py b/app/api/routes/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/api/routes/__init__.py and /dev/null differ
[1mdiff --git a/app/api/routes/items.py b/app/api/routes/items.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/api/routes/items.py and /dev/null differ
[1mdiff --git a/app/core/__init__.py b/app/core/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/core/__init__.py and /dev/null differ
[1mdiff --git a/app/core/config.py b/app/core/config.py[m
[1mdeleted file mode 100644[m
[1mindex 8439d23..0000000[m
Binary files a/app/core/config.py and /dev/null differ
[1mdiff --git a/app/core/database.py b/app/core/database.py[m
[1mdeleted file mode 100644[m
[1mindex ac8b6e3..0000000[m
Binary files a/app/core/database.py and /dev/null differ
[1mdiff --git a/app/main.py b/app/main.py[m
[1mdeleted file mode 100644[m
[1mindex cb01149..0000000[m
Binary files a/app/main.py and /dev/null differ
[1mdiff --git a/app/models/__init__.py b/app/models/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/models/__init__.py and /dev/null differ
[1mdiff --git a/app/models/item.py b/app/models/item.py[m
[1mdeleted file mode 100644[m
[1mindex 46db251..0000000[m
Binary files a/app/models/item.py and /dev/null differ
[1mdiff --git a/app/schemas/__init__.py b/app/schemas/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/schemas/__init__.py and /dev/null differ
[1mdiff --git a/app/schemas/item.py b/app/schemas/item.py[m
[1mdeleted file mode 100644[m
[1mindex 948e9dd..0000000[m
Binary files a/app/schemas/item.py and /dev/null differ
[1mdiff --git a/app/services/__init__.py b/app/services/__init__.py[m
[1mdeleted file mode 100644[m
[1mindex 49cc8ef..0000000[m
Binary files a/app/services/__init__.py and /dev/null differ
[1mdiff --git a/app/services/item_service.py b/app/services/item_service.py[m
[1mdeleted file mode 100644[m
[1mindex d30c674..0000000[m
Binary files a/app/services/item_service.py and /dev/null differ
[1mdiff --git a/venv/Lib/site-packages/alembic-1.15.2.dist-info/REQUESTED b/backend/Dockerfile[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/alembic-1.15.2.dist-info/REQUESTED[m
[1mrename to backend/Dockerfile[m
[1mdiff --git a/venv/Lib/site-packages/alembic/runtime/__init__.py b/backend/app/__init__.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/alembic/runtime/__init__.py[m
[1mrename to backend/app/__init__.py[m
[1mdiff --git a/backend/app/__pycache__/__init__.cpython-312.pyc b/backend/app/__pycache__/__init__.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..3e22b1b[m
Binary files /dev/null and b/backend/app/__pycache__/__init__.cpython-312.pyc differ
[1mdiff --git a/backend/app/__pycache__/main.cpython-312.pyc b/backend/app/__pycache__/main.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..f590971[m
Binary files /dev/null and b/backend/app/__pycache__/main.cpython-312.pyc differ
[1mdiff --git a/venv/Lib/site-packages/alembic/testing/plugin/__init__.py b/backend/app/api/__init__.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/alembic/testing/plugin/__init__.py[m
[1mrename to backend/app/api/__init__.py[m
[1mdiff --git a/backend/app/api/__pycache__/__init__.cpython-312.pyc b/backend/app/api/__pycache__/__init__.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..b187911[m
Binary files /dev/null and b/backend/app/api/__pycache__/__init__.cpython-312.pyc differ
[1mdiff --git a/venv/Lib/site-packages/anyio/_backends/__init__.py b/backend/app/api/v1/__init__.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/anyio/_backends/__init__.py[m
[1mrename to backend/app/api/v1/__init__.py[m
[1mdiff --git a/backend/app/api/v1/__pycache__/__init__.cpython-312.pyc b/backend/app/api/v1/__pycache__/__init__.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..042dacb[m
Binary files /dev/null and b/backend/app/api/v1/__pycache__/__init__.cpython-312.pyc differ
[1mdiff --git a/venv/Lib/site-packages/anyio/_core/__init__.py b/backend/app/api/v1/endpoints/__init__.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/anyio/_core/__init__.py[m
[1mrename to backend/app/api/v1/endpoints/__init__.py[m
[1mdiff --git a/backend/app/api/v1/endpoints/__pycache__/__init__.cpython-312.pyc b/backend/app/api/v1/endpoints/__pycache__/__init__.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..b07c80e[m
Binary files /dev/null and b/backend/app/api/v1/endpoints/__pycache__/__init__.cpython-312.pyc differ
[1mdiff --git a/backend/app/api/v1/endpoints/__pycache__/auth.cpython-312.pyc b/backend/app/api/v1/endpoints/__pycache__/auth.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..5df405c[m
Binary files /dev/null and b/backend/app/api/v1/endpoints/__pycache__/auth.cpython-312.pyc differ
[1mdiff --git a/backend/app/api/v1/endpoints/__pycache__/charting.cpython-312.pyc b/backend/app/api/v1/endpoints/__pycache__/charting.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..955f891[m
Binary files /dev/null and b/backend/app/api/v1/endpoints/__pycache__/charting.cpython-312.pyc differ
[1mdiff --git a/backend/app/api/v1/endpoints/auth.py b/backend/app/api/v1/endpoints/auth.py[m
[1mnew file mode 100644[m
[1mindex 0000000..5a0951d[m
[1m--- /dev/null[m
[1m+++ b/backend/app/api/v1/endpoints/auth.py[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32mfrom fastapi import APIRouter, Depends, HTTPException, status[m
[32m+[m[32mfrom sqlalchemy.orm import Session[m
[32m+[m[32mfrom app.core.config import settings[m
[32m+[m[32mfrom app.models.user import User[m
[32m+[m[32mfrom app.schemas.user import UserCreate, Token[m
[32m+[m[32mfrom passlib.context import CryptContext[m
[32m+[m[32mfrom jose import jwt[m
[32m+[m[32mfrom datetime import datetime, timedelta[m
[32m+[m[32mfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm[m
[32m+[m[32mfrom app.core.database import get_db[m
[32m+[m
[32m+[m[32mrouter = APIRouter()[m
[32m+[m[32mpwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")[m
[32m+[m[32moauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/v1/token")[m
[32m+[m
[32m+[m[32mdef verify_password(plain_password, hashed_password):[m
[32m+[m[32m    return pwd_context.verify(plain_password, hashed_password)[m
[32m+[m
[32m+[m[32mdef get_password_hash(password):[m
[32m+[m[32m    return pwd_context.hash(password)[m
[32m+[m
[32m+[m[32mdef create_access_token(data: dict, expires_delta: timedelta):[m
[32m+[m[32m    to_encode = data.copy()[m
[32m+[m[32m    expire = datetime.utcnow() + expires_delta[m
[32m+[m[32m    to_encode.update({"exp": expire})[m
[32m+[m[32m    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)[m
[32m+[m[32m    return encoded_jwt[m
[32m+[m
[32m+[m[32m@router.post("/token", response_model=Token)[m
[32m+[m[32masync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):[m
[32m+[m[32m    user = db.query(User).filter(User.username == form_data.username).first()[m
[32m+[m[32m    if not user or not verify_password(form_data.password, user.hashed_password):[m
[32m+[m[32m        raise HTTPException([m
[32m+[m[32m            status_code=status.HTTP_401_UNAUTHORIZED,[m
[32m+[m[32m            detail="Incorrect username or password",[m
[32m+[m[32m            headers={"WWW-Authenticate": "Bearer"},[m
[32m+[m[32m        )[m
[32m+[m[32m    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)[m
[32m+[m[32m    access_token = create_access_token([m
[32m+[m[32m        data={"sub": user.username}, expires_delta=access_token_expires[m
[32m+[m[32m    )[m
[32m+[m[32m    return {"access_token": access_token, "token_type": "bearer"}[m
[32m+[m
[32m+[m[32m@router.post("/register", response_model=User)[m
[32m+[m[32masync def register_user(user: UserCreate, db: Session = Depends(get_db)):[m
[32m+[m[32m    db_user = db.query(User).filter(User.username == user.username).first()[m
[32m+[m[32m    if db_user:[m
[32m+[m[32m        raise HTTPException(status_code=400, detail="Username already registered")[m
[32m+[m[32m    hashed_password = get_password_hash(user.password)[m
[32m+[m[32m    new_user = User(username=user.username, email=user.email, hashed_password=hashed_password)[m
[32m+[m[32m    db.add(new_user)[m
[32m+[m[32m    db.commit()[m
[32m+[m[32m    db.refresh(new_user)[m
[32m+[m[32m    return new_user[m
\ No newline at end of file[m
[1mdiff --git a/backend/app/api/v1/endpoints/charting.py b/backend/app/api/v1/endpoints/charting.py[m
[1mnew file mode 100644[m
[1mindex 0000000..fe53698[m
[1m--- /dev/null[m
[1m+++ b/backend/app/api/v1/endpoints/charting.py[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mfrom fastapi import APIRouter[m
[32m+[m
[32m+[m[32mrouter = APIRouter()[m
[32m+[m
[32m+[m[32m# Temporary mock data[m
[32m+[m[32m@router.get("/chart-data")[m
[32m+[m[32masync def get_chart_data():[m
[32m+[m[32m    return [[m
[32m+[m[32m        {"time": 1696118400, "open": 50000, "high": 51000, "low": 49500, "close": 50500},[m
[32m+[m[32m        {"time": 1696204800, "open": 50500, "high": 51500, "low": 50000, "close": 51000},[m
[32m+[m[32m    ][m
\ No newline at end of file[m
[1mdiff --git a/venv/Lib/site-packages/anyio/streams/__init__.py b/backend/app/core/__init__.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/anyio/streams/__init__.py[m
[1mrename to backend/app/core/__init__.py[m
[1mdiff --git a/backend/app/core/__pycache__/__init__.cpython-312.pyc b/backend/app/core/__pycache__/__init__.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..6270a7e[m
Binary files /dev/null and b/backend/app/core/__pycache__/__init__.cpython-312.pyc differ
[1mdiff --git a/backend/app/core/__pycache__/config.cpython-312.pyc b/backend/app/core/__pycache__/config.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..9e136d7[m
Binary files /dev/null and b/backend/app/core/__pycache__/config.cpython-312.pyc differ
[1mdiff --git a/venv/Lib/site-packages/alembic/py.typed b/backend/app/core/config.py[m
[1msimilarity index 100%[m
[1mrename from venv/Lib/site-packages/alembic/py.typed[m
[1mrename to backend/app/core/config.py[m
[1mdiff --git a/backend/app/core/database.py b/backend/app/core/database.py[m
[1mnew file mode 100644[m
[1mindex 0000000..5399ce7[m
[1m--- /dev/null[m
[1m+++ b/backend/app/core/database.py[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mfrom sqlalchemy import create_engine[m
[32m+[m[32mfrom sqlalchemy.orm import sessionmaker[m
[32m+[m[32mfrom app.core.config import settings[m
[32m+[m
[32m+[m[32mengine = create_engine(settings.DATABASE_URL)[m
[32m+[m[32mSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)[m
[32m+[m
[32m+[m[32mdef get_db():[m
[32m+[m[32m    db = SessionLocal()[m
[32m+[m[32m    try:[m
[32m+[m[32m        yield db[m
[32m+[m[32m    finally:[m
[32m+[m[32m        db.close()[m
\ No newline at end of file[m
[1mdiff --git a/backend/app/main.py b/backend/app/main.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a157e4b[m
[1m--- /dev/null[m
[1m+++ b/backend/app/main.py[m
[36m@@ -0,0 +1,16 @@[m
[32m+[m[32mfrom fastapi import FastAPI[m
[32m+[m[32mfrom app.api.v1.endpoints import auth, charting[m
[32m+[m
[32m+[m[32mapp = FastAPI([m
[32m+[m[32m    title="Market Efficiency Trading Platform",[m
[32m+[m[32m    description="A scalable trading education platform",[m
[32m+[m[32m    version="1.0.0"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# Include versioned API routers[m
[32m+[m[32mapp.include_router(auth.router, prefix="/api/v1")[m
[32m+[m[32mapp.include_router(charting.router, prefix="/api/v1")[m
[32m+[m
[32m+[m[32m@app.get("/")[m
[32m+[m[32masync def root():[m
[32m+[m[32m    return {"message": "Welcome to the Market Efficiency Trading Platform"}[m
\ No newline at end of file[m
[1mdiff --git a/venv/Lib/site-packages/fastapi/dependencies/__init__